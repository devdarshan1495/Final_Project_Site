document.addEventListener('DOMContentLoaded', () => {
    const themeToggleBtn = document.getElementById('themeToggle');
    if (themeToggleBtn) {
        const currentTheme = localStorage.getItem('theme') || 'light';
        function applyTheme(theme) { document.body.classList.toggle('dark-mode', theme === 'dark'); themeToggleBtn.innerHTML = theme === 'dark' ? '<i class="ri-moon-fill"></i>' : '<i class="ri-sun-line"></i>'; localStorage.setItem('theme', theme); }
        applyTheme(currentTheme);
        themeToggleBtn.addEventListener('click', () => { let newTheme = document.body.classList.contains('dark-mode') ? 'light' : 'dark'; applyTheme(newTheme); });
    }

    const navLinks = document.querySelectorAll('.sidebar-nav .nav-link');
    const contentSections = document.querySelectorAll('.content-section');
    const sidebar = document.getElementById('sidebar');
    const rightPanel = document.getElementById('rightPanel');
    const menuToggle = document.getElementById('menuToggle');
    const rightPanelToggle = document.getElementById('rightPanelToggle');
    const overlayBackdrop = document.getElementById('overlayBackdrop');
    // Removed: const mainContentWrapper = document.getElementById('mainContentWrapper');
    // As adjustMainContentMargin function is removed.

    const activeLink = document.querySelector('.sidebar-nav .nav-link.active');
    if (activeLink) { const targetId = activeLink.dataset.target; if(targetId){const targetSection = document.getElementById(targetId); if (targetSection) targetSection.style.display = 'block';}}
    
    navLinks.forEach(link => { link.addEventListener('click', (e) => { if (link.classList.contains('logout-btn')) return; e.preventDefault(); const targetId = link.dataset.target; if(!targetId) return; navLinks.forEach(l => l.classList.remove('active')); link.classList.add('active'); contentSections.forEach(section => { section.style.display = section.id === targetId ? 'block' : 'none';}); if (targetId === 'activeAlarms') renderActiveAlarmsList(); if (targetId === 'notes') renderNotes(); if (window.innerWidth <= 992 && sidebar) { sidebar.classList.remove('open'); if(overlayBackdrop) overlayBackdrop.classList.remove('active');}});});
    
    if(menuToggle && sidebar && overlayBackdrop) menuToggle.addEventListener('click', () => { sidebar.classList.toggle('open'); overlayBackdrop.classList.toggle('active', sidebar.classList.contains('open')); if(rightPanel && rightPanel.classList.contains('open')) {rightPanel.classList.remove('open'); if (!sidebar.classList.contains('open')) overlayBackdrop.classList.remove('active'); } });
    if(rightPanelToggle && rightPanel && overlayBackdrop) rightPanelToggle.addEventListener('click', () => { rightPanel.classList.toggle('open'); overlayBackdrop.classList.toggle('active', rightPanel.classList.contains('open')); if(sidebar && sidebar.classList.contains('open')) {sidebar.classList.remove('open'); if(!rightPanel.classList.contains('open')) overlayBackdrop.classList.remove('active');} });
    if(overlayBackdrop) overlayBackdrop.addEventListener('click', () => { if(sidebar) sidebar.classList.remove('open'); if(rightPanel) rightPanel.classList.remove('open'); overlayBackdrop.classList.remove('active'); });

    const pointsFeedbackEl = document.getElementById('pointsFeedback');
    function showPointsFeedback(points) { if (!pointsFeedbackEl) return; pointsFeedbackEl.textContent = `+${points} Points!`; pointsFeedbackEl.classList.add('show'); setTimeout(() => { pointsFeedbackEl.classList.remove('show'); }, 2000); }

    // ... (Rest of JavaScript: Pomodoro, Tasks, Alarms, Notes, Calendar, Insights logic)
    const pomodoroDisplay = document.getElementById('pomodoroDisplay'); const pomodoroStartBtn = document.getElementById('pomodoroStart'); const pomodoroPauseBtn = document.getElementById('pomodoroPause'); const pomodoroResetBtn = document.getElementById('pomodoroReset'); const pomodoroStatusEl = document.getElementById('pomodoroStatus'); let pomodoroTimerInterval; let pomodoroTimeLeft = 25 * 60; let pomodoroIsPaused = true; let pomodoroCurrentSession = 'Work';
    function updatePomodoroDisplay() { if(!pomodoroDisplay) return; const minutes = Math.floor(pomodoroTimeLeft / 60); const seconds = pomodoroTimeLeft % 60; pomodoroDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`; }
    if(pomodoroStartBtn) pomodoroStartBtn.addEventListener('click', () => { if (pomodoroIsPaused) { pomodoroIsPaused = false; pomodoroTimerInterval = setInterval(() => { if (pomodoroTimeLeft > 0) { pomodoroTimeLeft--; updatePomodoroDisplay(); } else { clearInterval(pomodoroTimerInterval); const pointsEarned = pomodoroCurrentSession === 'Work' ? 25 : 5; addPoints(pointsEarned); showPointsFeedback(pointsEarned); if (pomodoroCurrentSession === 'Work') { pomodoroCurrentSession = 'Break'; pomodoroTimeLeft = 5 * 60; pomodoroStatusEl.textContent = "Break Session"; triggerAlarm("Work session over! Time for a break."); } else { pomodoroCurrentSession = 'Work'; pomodoroTimeLeft = 25 * 60; pomodoroStatusEl.textContent = "Work Session"; triggerAlarm("Break over! Back to work."); } pomodoroIsPaused = true; updatePomodoroDisplay(); } }, 1000); } });
    if(pomodoroPauseBtn) pomodoroPauseBtn.addEventListener('click', () => { pomodoroIsPaused = true; clearInterval(pomodoroTimerInterval); });
    if(pomodoroResetBtn) pomodoroResetBtn.addEventListener('click', () => { pomodoroIsPaused = true; clearInterval(pomodoroTimerInterval); pomodoroCurrentSession = 'Work'; pomodoroTimeLeft = 25 * 60; if(pomodoroStatusEl) pomodoroStatusEl.textContent = "Work Session"; updatePomodoroDisplay(); });
    updatePomodoroDisplay();

    const taskFormModal = document.getElementById('taskFormModal'); const openTaskModalBtn = document.getElementById('openTaskModalBtn'); const cancelTaskBtn = document.getElementById('cancelTaskBtn'); const taskForm = document.getElementById('taskForm'); const fullTaskList = document.getElementById('fullTaskList'); const dashboardTaskList = document.getElementById('dashboardTaskList'); const quickTaskInput = document.getElementById('quickTaskInput'); const quickAddTaskBtn = document.getElementById('quickAddTaskBtn'); const taskSearchInput = document.getElementById('taskSearchInput');
    const taskModalTitle = document.getElementById('taskModalTitle');
    let tasks = JSON.parse(localStorage.getItem('itmActivities')) || [];
    let userPoints = parseInt(localStorage.getItem('itmUserPoints')) || 0;
    let editingTaskId = null;
    updatePointsDisplay();
    function openModalForNewTask() { editingTaskId = null; if(taskForm) taskForm.reset(); if(taskModalTitle) taskModalTitle.textContent = 'Add New Activity'; if(taskFormModal) taskFormModal.style.display = 'flex'; }
    function openModalForEditTask(task) { editingTaskId = task.id; if(taskModalTitle) taskModalTitle.textContent = 'Edit Activity'; if(taskForm){ document.getElementById('taskName').value = task.name; document.getElementById('taskDescription').value = task.description; document.getElementById('activityStartDate').value = task.startDate || ''; document.getElementById('activityStartTime').value = task.startTime || ''; document.getElementById('activityEndDate').value = task.endDate || ''; document.getElementById('activityEndTime').value = task.endTime || ''; document.getElementById('taskPriority').value = task.priority;} if(taskFormModal) taskFormModal.style.display = 'flex'; }
    if(openTaskModalBtn) openTaskModalBtn.addEventListener('click', openModalForNewTask);
    if(cancelTaskBtn) cancelTaskBtn.addEventListener('click', () => {if(taskFormModal) taskFormModal.style.display = 'none'});
    function addPoints(amount) { userPoints += amount; updatePointsDisplay(); localStorage.setItem('itmUserPoints', userPoints); }
    function updatePointsDisplay() { const dpEl = document.getElementById('userPointsDisplay'); if(dpEl) dpEl.textContent = userPoints; const psEl = document.getElementById('pointsStat'); if(psEl) psEl.textContent = userPoints;}
    if(taskForm) taskForm.addEventListener('submit', (e) => { e.preventDefault(); const taskData = { id: editingTaskId || Date.now().toString(), name: document.getElementById('taskName').value, description: document.getElementById('taskDescription').value, startDate: document.getElementById('activityStartDate').value, startTime: document.getElementById('activityStartTime').value, endDate: document.getElementById('activityEndDate').value, endTime: document.getElementById('activityEndTime').value, priority: document.getElementById('taskPriority').value, completed: editingTaskId ? tasks.find(t => t.id === editingTaskId).completed : false }; if (editingTaskId) { tasks = tasks.map(task => task.id === editingTaskId ? taskData : task); } else { tasks.push(taskData); addPoints(10); showPointsFeedback(10); } localStorage.setItem('itmActivities', JSON.stringify(tasks)); renderTasks(); if(taskFormModal) taskFormModal.style.display = 'none'; });
    if(quickAddTaskBtn && quickTaskInput) quickAddTaskBtn.addEventListener('click', () => { const name = quickTaskInput.value.trim(); if (!name) return; tasks.push({ id: Date.now().toString(), name: name, description: '', startDate: new Date().toISOString().split('T')[0], startTime: '', endDate: '', endTime: '', priority: 'low', completed: false }); addPoints(5); showPointsFeedback(5); localStorage.setItem('itmActivities', JSON.stringify(tasks)); renderTasks(); quickTaskInput.value = ''; quickAddTaskBtn.style.backgroundColor = 'var(--success-green)'; quickAddTaskBtn.textContent = 'Added!'; setTimeout(() => { quickAddTaskBtn.style.backgroundColor = 'var(--primary-blue)'; quickAddTaskBtn.textContent = 'Add Activity'; }, 1000); });
    function formatActivityTime(dateStr, timeStr) { if (!dateStr) return ''; let date = new Date(dateStr + (timeStr ? 'T' + timeStr : 'T00:00:00Z')); return date.toLocaleDateString(undefined, {month:'short', day:'numeric'}) + (timeStr ? ` at ${date.toLocaleTimeString(undefined, {hour:'2-digit', minute:'2-digit'})}`: ''); }
    function renderTasks(searchTerm = '') { if(fullTaskList) fullTaskList.innerHTML = ''; if(dashboardTaskList) dashboardTaskList.innerHTML = ''; const lowerSearchTerm = searchTerm.toLowerCase(); const filteredTasks = tasks.filter(task => (task.name && task.name.toLowerCase().includes(lowerSearchTerm)) || (task.description && task.description.toLowerCase().includes(lowerSearchTerm))); const sortedTasks = filteredTasks.sort((a,b) => (a.completed === b.completed) ? 0 : a.completed ? 1 : -1).sort((a, b) => new Date(a.startDate || '9999-12-31') - new Date(b.startDate || '9999-12-31')); if (sortedTasks.length === 0 && fullTaskList) { fullTaskList.innerHTML = `<p style="text-align:center; color:var(--secondary-text); padding:20px 0;">No activities ${searchTerm ? 'matching your search' : 'yet'}.</p>`;} else { let dashboardTaskCount = 0; sortedTasks.forEach((task, index) => { const taskEl = document.createElement('div'); taskEl.className = `task-item ${task.completed ? 'completed' : ''}`; taskEl.dataset.id = task.id; taskEl.style.animationDelay = `${index * 0.05}s`; let activityTimeDisplay = ''; if (task.startDate) { activityTimeDisplay = `<span class="task-dates">Starts: ${formatActivityTime(task.startDate, task.startTime)}`; if (task.endDate) { activityTimeDisplay += `<br>Ends: ${formatActivityTime(task.endDate, task.endTime)}`;} activityTimeDisplay += `</span>`;} taskEl.innerHTML = `<div class="task-info"><h4>${task.name}</h4>${task.description ? `<p>${task.description.substring(0,50)}${task.description.length > 50 ? '...' : ''}</p>` : ''}${activityTimeDisplay}</div><div class="task-meta">${task.priority ? `<span class="priority ${task.priority}">${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}</span>` : ''}</div><div class="task-actions"><button class="btn-complete ${task.completed ? 'done' : ''}" title="Mark Complete/Incomplete"><i class="ri-checkbox-circle-${task.completed ? 'fill' : 'line'}"></i></button><button class="btn-edit" title="Edit Activity"><i class="ri-edit-2-line"></i></button><button class="btn-delete" title="Delete Activity"><i class="ri-delete-bin-line"></i></button></div>`; if(fullTaskList) fullTaskList.appendChild(taskEl.cloneNode(true)); if (dashboardTaskList && !task.completed && dashboardTaskCount < 3 && !searchTerm) { dashboardTaskList.appendChild(taskEl.cloneNode(true)); dashboardTaskCount++; } });} if (dashboardTaskList && dashboardTaskList.innerHTML === '' && !searchTerm) { dashboardTaskList.innerHTML = '<p style="text-align:center; color:var(--secondary-text); padding:20px 0;">All activities complete or no current activities!</p>'; } let completedTasksCount = tasks.filter(t => t.completed).length; let upcomingTasksHTML = ''; tasks.filter(t => !t.completed && t.startDate) .sort((a,b) => new Date(a.startDate) - new Date(b.startDate)) .slice(0,3) .forEach(task => { upcomingTasksHTML += `<div class="schedule-item"><span class="item-time">${formatActivityTime(task.startDate, task.startTime).split(' at')[0]}</span><div class="item-details"><p>${task.name}</p><span>Priority: ${task.priority}</span></div></div>`; }); const tcsEl = document.getElementById('tasksCompletedStat'); if(tcsEl) tcsEl.textContent = completedTasksCount; const utlEl = document.getElementById('upcomingTasksList'); if(utlEl) utlEl.innerHTML = upcomingTasksHTML || '<p style="font-size:13px; color:var(--secondary-text);">No upcoming deadlines or events.</p>'; if(fullTaskList) {document.querySelectorAll('#fullTaskList .task-item .btn-complete').forEach(btn => btn.addEventListener('click', toggleCompleteTask)); document.querySelectorAll('#fullTaskList .task-item .btn-edit').forEach(btn => btn.addEventListener('click', editTaskHandler)); document.querySelectorAll('#fullTaskList .task-item .btn-delete').forEach(btn => btn.addEventListener('click', deleteTaskHandler));} if (dashboardTaskList && !searchTerm) { document.querySelectorAll('#dashboardTaskList .task-item .btn-complete').forEach(btn => btn.addEventListener('click', toggleCompleteTask)); document.querySelectorAll('#dashboardTaskList .task-item .btn-edit').forEach(btn => btn.addEventListener('click', editTaskHandler)); document.querySelectorAll('#dashboardTaskList .task-item .btn-delete').forEach(btn => btn.addEventListener('click', deleteTaskHandler));} renderCalendar(); }
    if(taskSearchInput) taskSearchInput.addEventListener('input', (e) => renderTasks(e.target.value));
    function toggleCompleteTask(e) { const taskId = e.currentTarget.closest('.task-item').dataset.id; let points = 0; tasks = tasks.map(task => { if (task.id === taskId) { if(!task.completed){ points = 15; addPoints(points); } return { ...task, completed: !task.completed }; } return task; }); if(points > 0) showPointsFeedback(points); localStorage.setItem('itmActivities', JSON.stringify(tasks)); renderTasks(taskSearchInput ? taskSearchInput.value : ''); const icon = e.currentTarget.querySelector('i'); icon.style.transform = 'scale(1.3)'; setTimeout(() => icon.style.transform = 'scale(1)', 200); }
    function editTaskHandler(e) { const taskId = e.currentTarget.closest('.task-item').dataset.id; const taskToEdit = tasks.find(task => task.id === taskId); openModalForEditTask(taskToEdit); }
    function deleteTaskHandler(e) { const taskId = e.currentTarget.closest('.task-item').dataset.id; if (confirm('Are you sure you want to delete this activity?')) { tasks = tasks.filter(task => task.id !== taskId); localStorage.setItem('itmActivities', JSON.stringify(tasks)); renderTasks(taskSearchInput ? taskSearchInput.value : ''); } }
    
    const calendarGrid = document.getElementById('calendarGrid'); const currentMonthYearDisplay = document.getElementById('currentMonthYear'); const prevMonthBtn = document.getElementById('prevMonth'); const nextMonthBtn = document.getElementById('nextMonth'); let currentDate = new Date();
    function renderCalendar() { if(!calendarGrid || !currentMonthYearDisplay) return; calendarGrid.innerHTML = ''; const year = currentDate.getFullYear(); const month = currentDate.getMonth(); currentMonthYearDisplay.textContent = `${currentDate.toLocaleString('default', { month: 'long' })} ${year}`; const firstDayOfMonth = new Date(year, month, 1).getDay(); const daysInMonth = new Date(year, month + 1, 0).getDate(); const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']; dayNames.forEach(name => { const dayNameEl = document.createElement('div'); dayNameEl.className = 'day-name'; dayNameEl.textContent = name; calendarGrid.appendChild(dayNameEl);}); const dayOffset = firstDayOfMonth; for (let i = 0; i < dayOffset; i++) { calendarGrid.appendChild(document.createElement('div'));} for (let day = 1; day <= daysInMonth; day++) { const dateCell = document.createElement('div'); dateCell.className = 'date-cell'; dateCell.textContent = day; const cellDateString = new Date(year, month, day).toISOString().split('T')[0]; if (tasks.some(task => task.startDate === cellDateString && !task.completed)) { dateCell.classList.add('has-task');} if (day === new Date().getDate() && month === new Date().getMonth() && year === new Date().getFullYear()) { dateCell.classList.add('today');} calendarGrid.appendChild(dateCell);}}
    if(prevMonthBtn) prevMonthBtn.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() - 1); renderCalendar(); });
    if(nextMonthBtn) nextMonthBtn.addEventListener('click', () => { currentDate.setMonth(currentDate.getMonth() + 1); renderCalendar(); });
    
    const alarmTimeInput = document.getElementById('alarmTimeInput'); const setAlarmBtn = document.getElementById('setAlarmBtn'); const nextAlarmDisplay = document.getElementById('nextAlarmDisplay'); const activeAlarmsListContainer = document.getElementById('activeAlarmsListContainer'); const noActiveAlarmsMsg = document.getElementById('noActiveAlarmsMsg'); let activeAlarms = JSON.parse(localStorage.getItem('itmAlarms')) || []; let alarmInterval; const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    function displayNextActiveAlarmOnDashboard() { if(!nextAlarmDisplay) return; const now = new Date(); const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes(); const activeUpcoming = activeAlarms.filter(alarm => alarm.active).map(alarm => { const [hours, minutes] = alarm.time.split(':').map(Number); const alarmTimeInMinutes = hours * 60 + minutes; return { ...alarm, timeInMinutes: alarmTimeInMinutes, diff: alarmTimeInMinutes - currentTimeInMinutes }; }).filter(alarm => alarm.diff >= 0).sort((a, b) => a.timeInMinutes - b.timeInMinutes); if (activeUpcoming.length > 0) { nextAlarmDisplay.textContent = `Next alarm: ${activeUpcoming[0].time}`; } else { nextAlarmDisplay.textContent = "No alarm set."; }}
    function renderActiveAlarmsList() { if(!activeAlarmsListContainer || !noActiveAlarmsMsg) return; activeAlarmsListContainer.innerHTML = ''; const currentActive = activeAlarms.filter(alarm => alarm.active); if (currentActive.length === 0) { noActiveAlarmsMsg.style.display = 'block'; activeAlarmsListContainer.appendChild(noActiveAlarmsMsg); } else { noActiveAlarmsMsg.style.display = 'none'; currentActive.sort((a,b) => a.time.localeCompare(b.time)).forEach(alarm => { const li = document.createElement('li'); li.className = 'alarm-item'; li.dataset.id = alarm.id; li.innerHTML = `<span>${alarm.time}</span><button class="cancel-alarm-btn">Cancel</button>`; li.querySelector('.cancel-alarm-btn').addEventListener('click', () => cancelAlarm(alarm.id)); activeAlarmsListContainer.appendChild(li); }); }}
    function cancelAlarm(alarmId) { activeAlarms = activeAlarms.map(alarm => alarm.id.toString() === alarmId.toString() ? {...alarm, active: false } : alarm); activeAlarms = activeAlarms.filter(alarm => alarm.active); localStorage.setItem('itmAlarms', JSON.stringify(activeAlarms)); displayNextActiveAlarmOnDashboard(); renderActiveAlarmsList(); }
    if(setAlarmBtn && alarmTimeInput) setAlarmBtn.addEventListener('click', () => { const timeValue = alarmTimeInput.value; if (timeValue) { const newAlarm = { id: Date.now().toString(), time: timeValue, active: true }; activeAlarms.push(newAlarm); localStorage.setItem('itmAlarms', JSON.stringify(activeAlarms)); alarmTimeInput.value = ''; displayNextActiveAlarmOnDashboard(); renderActiveAlarmsList(); if (!alarmInterval && activeAlarms.some(a=>a.active)) startAlarmChecker(); setAlarmBtn.textContent = "Set!"; setTimeout(() => setAlarmBtn.textContent = "Set", 1000); } else { alert("Please select a time for the alarm."); } });
    function playBeep() { if (!audioContext) return; const oscillator = audioContext.createOscillator(); const gainNode = audioContext.createGain(); oscillator.connect(gainNode); gainNode.connect(audioContext.destination); oscillator.type = 'sine'; oscillator.frequency.setValueAtTime(440, audioContext.currentTime); gainNode.gain.setValueAtTime(0.3, audioContext.currentTime); oscillator.start(); oscillator.stop(audioContext.currentTime + 0.2); }
    function triggerAlarm(message = "Alarm! Time's up!") { alert(message); playBeep(); }
    function checkAlarms() { const now = new Date(); const H = now.getHours().toString().padStart(2, '0'); const M = now.getMinutes().toString().padStart(2, '0'); const currentTime = `${H}:${M}`; let alarmsUpdated = false; activeAlarms.forEach((alarm, index) => { if (alarm.active && alarm.time === currentTime) { triggerAlarm(`Alarm for ${alarm.time}! Your Focus Alarm.`); activeAlarms[index].active = false; alarmsUpdated = true; } }); if (alarmsUpdated) { activeAlarms = activeAlarms.filter(alarm => alarm.active); localStorage.setItem('itmAlarms', JSON.stringify(activeAlarms)); displayNextActiveAlarmOnDashboard(); if(document.getElementById('activeAlarms') && document.getElementById('activeAlarms').style.display === 'block'){ renderActiveAlarmsList(); }}}
    function startAlarmChecker() { if(alarmInterval) clearInterval(alarmInterval); alarmInterval = setInterval(checkAlarms, 15000); checkAlarms(); }
    displayNextActiveAlarmOnDashboard(); if(activeAlarms.some(a => a.active)) startAlarmChecker();

    const notesListContainer = document.getElementById('notesListContainer'); const noNotesMsgEl = document.getElementById('noNotesMsg'); const openNoteModalBtn = document.getElementById('openNoteModalBtn'); const noteFormModal = document.getElementById('noteFormModal'); const noteForm = document.getElementById('noteForm'); const cancelNoteBtn = document.getElementById('cancelNoteBtn'); const noteModalTitleEl = document.getElementById('noteModalTitle');
    let notes = JSON.parse(localStorage.getItem('itmDiaryNotes')) || []; let editingNoteId = null;
    function openModalForNewNote() { editingNoteId = null; if(noteForm) noteForm.reset(); if(noteModalTitleEl) noteModalTitleEl.textContent = 'Add New Diary Entry'; if(noteFormModal) noteFormModal.style.display = 'flex'; }
    function openModalForEditNote(note) { editingNoteId = note.id; if(noteModalTitleEl) noteModalTitleEl.textContent = 'View/Edit Diary Entry'; if(noteForm) { document.getElementById('noteTitle').value = note.title; document.getElementById('noteContent').value = note.content; } if(noteFormModal) noteFormModal.style.display = 'flex';}
    if(openNoteModalBtn) openNoteModalBtn.addEventListener('click', openModalForNewNote);
    if(cancelNoteBtn) cancelNoteBtn.addEventListener('click', () => { if(noteFormModal) noteFormModal.style.display = 'none'; });
    if(noteForm) noteForm.addEventListener('submit', (e) => { e.preventDefault(); const noteData = { id: editingNoteId || Date.now().toString(), title: document.getElementById('noteTitle').value.trim(), content: document.getElementById('noteContent').value.trim(), timestamp: new Date().toISOString() }; if (!noteData.content) { alert("Content cannot be empty!"); return; } if (editingNoteId) { notes = notes.map(note => note.id === editingNoteId ? {...noteData, timestamp: note.timestamp } : note); } else { notes.unshift(noteData); } localStorage.setItem('itmDiaryNotes', JSON.stringify(notes)); renderNotes(); if(noteFormModal) noteFormModal.style.display = 'none'; });
    function renderNotes() { if (!notesListContainer || !noNotesMsgEl) return; notesListContainer.innerHTML = ''; if (notes.length === 0) { noNotesMsgEl.style.display = 'block'; notesListContainer.appendChild(noNotesMsgEl); } else { noNotesMsgEl.style.display = 'none'; notes.sort((a,b) => new Date(b.timestamp) - new Date(a.timestamp)); notes.forEach(note => { const noteEl = document.createElement('div'); noteEl.className = 'note-item'; noteEl.dataset.id = note.id; const formattedTimestamp = new Date(note.timestamp).toLocaleString(undefined, {dateStyle: 'medium', timeStyle: 'short'}); noteEl.innerHTML = `${note.title ? `<h4>${note.title}</h4>` : ''}<p class="note-timestamp">${formattedTimestamp}</p><p class="note-content-preview">${note.content.substring(0, 100).replace(/\n/g, '<br>')}${note.content.length > 100 ? '...' : ''}</p><div class="note-actions"><button class="btn-view-note" title="View/Edit"><i class="ri-eye-line"></i></button><button class="btn-delete-note" title="Delete"><i class="ri-delete-bin-line"></i></button></div>`; noteEl.querySelector('.btn-view-note').addEventListener('click', () => openModalForEditNote(note)); noteEl.querySelector('.btn-delete-note').addEventListener('click', () => deleteNote(note.id)); notesListContainer.appendChild(noteEl); }); }}
    function deleteNote(noteId) { if (confirm("Delete this diary entry?")) { notes = notes.filter(note => note.id !== noteId); localStorage.setItem('itmDiaryNotes', JSON.stringify(notes)); renderNotes(); }}

    const insights = [ "\"The secret of getting ahead is getting started.\" - Mark Twain", "\"Don't watch the clock; do what it does. Keep going.\" - Sam Levenson", "\"The way to get started is to quit talking and begin doing.\" - Walt Disney", "\"Productivity is never an accident.\" - Paul J. Meyer", "\"Focus on being productive instead of busy.\" - Tim Ferriss", "\"You don't have to be great to start, but you have to start to be great.\" - Zig Ziglar", "\"The key is not to prioritize what's on your schedule, but to schedule your priorities.\" - Stephen Covey", "\"Success is not final, failure is not fatal: It is the courage to continue that counts.\" - Winston Churchill", "\"Believe you can and you're halfway there.\" - Theodore Roosevelt", "\"Act as if what you do makes a difference. It does.\" - William James", "\"Well done is better than well said.\" - Benjamin Franklin", "\"The only way to do great work is to love what you do.\" - Steve Jobs", "\"You miss 100% of the shots you don’t take.\" - Wayne Gretzky", "\"Strive not to be a success, but rather to be of value.\" - Albert Einstein", "\"The mind is everything. What you think you become.\" - Buddha", "\"An ounce of prevention is worth a pound of cure.\" - Benjamin Franklin", "\"The best time to plant a tree was 20 years ago. The second best time is now.\" - Chinese Proverb", "\"Your limitation—it's only your imagination.\" - Unknown", "\"Push yourself, because no one else is going to do it for you.\" - Unknown", "\"Great things never come from comfort zones.\" - Unknown" ];
    const dailyInsightEl = document.getElementById('dailyInsight');
    if (dailyInsightEl) dailyInsightEl.textContent = insights[new Date().getDate() % insights.length];
    
    renderTasks();
    renderNotes();
});